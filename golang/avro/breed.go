// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     Cat.avsc
 *     Breed.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Breed int32

const (
	BreedABYSSINIAN         Breed = 0
	BreedAMERICAN_SHORTHAIR Breed = 1
	BreedBIRMAN             Breed = 2
	BreedMAINE_COON         Breed = 3
	BreedORIENTAL           Breed = 4
	BreedPERSIAN            Breed = 5
	BreedRAGDOLL            Breed = 6
	BreedSIAMESE            Breed = 7
	BreedSPHYNX             Breed = 8
)

func (e Breed) String() string {
	switch e {
	case BreedABYSSINIAN:
		return "ABYSSINIAN"
	case BreedAMERICAN_SHORTHAIR:
		return "AMERICAN_SHORTHAIR"
	case BreedBIRMAN:
		return "BIRMAN"
	case BreedMAINE_COON:
		return "MAINE_COON"
	case BreedORIENTAL:
		return "ORIENTAL"
	case BreedPERSIAN:
		return "PERSIAN"
	case BreedRAGDOLL:
		return "RAGDOLL"
	case BreedSIAMESE:
		return "SIAMESE"
	case BreedSPHYNX:
		return "SPHYNX"
	}
	return "unknown"
}

func writeBreed(r Breed, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewBreedValue(raw string) (r Breed, err error) {
	switch raw {
	case "ABYSSINIAN":
		return BreedABYSSINIAN, nil
	case "AMERICAN_SHORTHAIR":
		return BreedAMERICAN_SHORTHAIR, nil
	case "BIRMAN":
		return BreedBIRMAN, nil
	case "MAINE_COON":
		return BreedMAINE_COON, nil
	case "ORIENTAL":
		return BreedORIENTAL, nil
	case "PERSIAN":
		return BreedPERSIAN, nil
	case "RAGDOLL":
		return BreedRAGDOLL, nil
	case "SIAMESE":
		return BreedSIAMESE, nil
	case "SPHYNX":
		return BreedSPHYNX, nil
	}

	return -1, fmt.Errorf("invalid value for Breed: '%s'", raw)

}

func (b Breed) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *Breed) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewBreedValue(stringVal)
	*b = val
	return err
}

type BreedWrapper struct {
	Target *Breed
}

func (b BreedWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b BreedWrapper) SetInt(v int32) {
	*(b.Target) = Breed(v)
}

func (b BreedWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b BreedWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b BreedWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b BreedWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b BreedWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b BreedWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b BreedWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b BreedWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b BreedWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b BreedWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b BreedWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b BreedWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b BreedWrapper) Finalize() {}
