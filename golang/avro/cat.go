// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     Cat.avsc
 *     Breed.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Cat struct {
	Breed Breed `json:"breed"`

	Name string `json:"name"`
}

const CatAvroCRC64Fingerprint = "z\x13$\\\x81\xd2)\x81"

func NewCat() Cat {
	r := Cat{}
	r.Name = ""
	return r
}

func DeserializeCat(r io.Reader) (Cat, error) {
	t := NewCat()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCatFromSchema(r io.Reader, schema string) (Cat, error) {
	t := NewCat()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCat(r Cat, w io.Writer) error {
	var err error
	err = writeBreed(r.Breed, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r Cat) Serialize(w io.Writer) error {
	return writeCat(r, w)
}

func (r Cat) Schema() string {
	return "{\"fields\":[{\"name\":\"breed\",\"type\":{\"name\":\"Breed\",\"namespace\":\"example\",\"symbols\":[\"ABYSSINIAN\",\"AMERICAN_SHORTHAIR\",\"BIRMAN\",\"MAINE_COON\",\"ORIENTAL\",\"PERSIAN\",\"RAGDOLL\",\"SIAMESE\",\"SPHYNX\"],\"type\":\"enum\"}},{\"default\":\"\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"example.Cat\",\"type\":\"record\"}"
}

func (r Cat) SchemaName() string {
	return "example.Cat"
}

func (_ Cat) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Cat) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Cat) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Cat) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Cat) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Cat) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Cat) SetString(v string)   { panic("Unsupported operation") }
func (_ Cat) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Cat) Get(i int) types.Field {
	switch i {
	case 0:
		w := BreedWrapper{Target: &r.Breed}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	}
	panic("Unknown field index")
}

func (r *Cat) SetDefault(i int) {
	switch i {
	case 1:
		r.Name = ""
		return
	}
	panic("Unknown field index")
}

func (r *Cat) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Cat) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Cat) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Cat) HintSize(int)                     { panic("Unsupported operation") }
func (_ Cat) Finalize()                        {}

func (_ Cat) AvroCRC64Fingerprint() []byte {
	return []byte(CatAvroCRC64Fingerprint)
}

func (r Cat) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["breed"], err = json.Marshal(r.Breed)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Cat) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["breed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Breed); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for breed")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = ""
	}
	return nil
}
